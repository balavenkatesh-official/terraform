pipeline {
    agent any

    parameters {
        string(name: 'Access_key', defaultValue: '', description: 'AWS Access Key')
        string(name: 'Secret_key', defaultValue: '', description: 'AWS Secret Key')
        string(name: 'project_name', defaultValue: '', description: 'Project Name')
        booleanParam(name: 'DESTROY_INFRA', defaultValue: false, description: 'Set to true to destroy the infrastructure')
    }

    environment {
        ACCESS_KEY = "${params.Access_key}"
        SECRET_KEY = "${params.Secret_key}"
        PROJECT_NAME = "${params.project_name}"
    }

    stages {
        stage('Prepare Workspace') {
            when {
                expression { !params.DESTROY_INFRA }
            }
            steps {
                sh 'ls -la'
            }
        }
    
        stage('Generate SSH Key') {
            when {
                expression { !params.DESTROY_INFRA }
            }
            steps {
                script {
                    def project_name = env.PROJECT_NAME
                    sh """
                        ssh-keygen -t rsa -b 4096 -C "" -N '' -f ${project_name}
                        mv -v ${project_name} ${project_name}.pem
                        chmod -R 400 ${project_name}.pem
                    """
                    def value = sh(script: "cat ${project_name}.pub", returnStdout: true).trim()
                    sh """
                        sed -i "s|PUBLICKEY|${value}|g" terraform/input.tf
                    """
                }
            }
        }

        stage('Replace Variables') {
            when {
                expression { !params.DESTROY_INFRA }
            }
            steps {
                script {
                    sh """
                        sed -i "s|ACCESSKEY|${env.ACCESS_KEY}|g" terraform/input.tf
                        sed -i "s|SECRETKEY|${env.SECRET_KEY}|g" terraform/input.tf
                    """
                }
            }
        }

        stage('Terraform Init and Apply') {
            when {
                expression { !params.DESTROY_INFRA }
            }
            steps {
                dir('terraform') {
                    sh 'terraform init'
                    sh 'terraform apply --auto-approve'
                }
            }
        }

        stage('Save Outputs') {
            when {
                expression { !params.DESTROY_INFRA }
            }
            steps {
                dir('terraform') {
                    sh 'terraform output > ../output.txt'
                }
            }
        }

        stage('Update Ansible Inventory and Group Vars') {
            when {
                expression { !params.DESTROY_INFRA }
            }
            steps {
                script {
                    def ip = sh(script: "grep 'vm_public_ip' output.txt | cut -d '\"' -f 2", returnStdout: true).trim()
                    def pemFile = "${env.WORKSPACE}/${env.PROJECT_NAME}.pem"
                    sh """
                        sed -i "s|IPADDRESS|${ip}|g" ansible/inventory.yml
                        sed -i "s|ansible_ssh_private_key_file: .*|ansible_ssh_private_key_file: ${pemFile}|g" ansible/inventory.yml
                        sed -i "s|ipaddress: IPADDRESS|ipaddress: ${ip}|g" ansible/group_vars/all
                    """
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.DESTROY_INFRA }
            }
            steps {
                dir('terraform') {
                    script {
                        def accessKey = env.ACCESS_KEY
                        def secretKey = env.SECRET_KEY
                        sh """
                            #!/bin/bash

                            # Use sed to replace placeholders in the input.tf file
                            sed -i "s|ACCESSKEY|${accessKey}|g" input.tf
                            sed -i "s|SECRETKEY|${secretKey}|g" input.tf

                            # Destroy the Terraform infrastructure
                            terraform destroy --auto-approve
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'output.txt', allowEmptyArchive: true
        }
    }
}
